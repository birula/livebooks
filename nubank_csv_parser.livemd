<!-- livebook:{"file_entries":[{"file":{"file_system_id":"local","file_system_type":"local","path":"c:/Users/ThinkPad/Downloads/Nubank_2024-09-27.csv"},"name":"Nubank_2024-09-27.csv","type":"file"},{"file":{"file_system_id":"local","file_system_type":"local","path":"c:/Users/ThinkPad/Downloads/Nubank_2024-10.csv"},"name":"Nubank_2024-10.csv","type":"file"},{"file":{"file_system_id":"local","file_system_type":"local","path":"c:/Users/ThinkPad/Downloads/Nubank_2024-11-27.csv"},"name":"Nubank_2024-11-27.csv","type":"file"},{"file":{"file_system_id":"local","file_system_type":"local","path":"/home/lucas/livebook/nubank-2024-03.csv"},"name":"nubank-2024-03.csv","type":"file"},{"file":{"file_system_id":"local","file_system_type":"local","path":"/home/lucas/Downloads/nubank-2024-04.csv"},"name":"nubank-2024-04.csv","type":"file"},{"file":{"file_system_id":"local","file_system_type":"local","path":"c:/Users/ThinkPad/Downloads/nubank-2024-08.csv"},"name":"nubank-2024-08.csv","type":"file"}]} -->

# Nubank csv parser

```elixir
Mix.install([
  {:nimble_csv, "~> 1.2"},
  {:kino, "~> 0.14.0"}
])
```

## Introdução

This livebook was created to suport a monthly routine of extracting data from Nubank csv. The objective is create a list of expends for our household.

Google Sheet format example:

| Competência | Categoria     | Descrição | Pessoa | Data       | Titulo         | Valor  |
| ------------ | ------------- | ----------- | ------ | ---------- | -------------- | ------ |
| 01/09/2023   | Alimentação | Feira       | Lucas  | 05/09/2023 | Folhas         | 14,00  |
| 01/09/2023   | Cachorro      | Extras      | Dayana | 03/09/2023 | Vitória Hotel | 110,00 |

## Define NimbleCSV Parser

```elixir
NimbleCSV.define(NubankCSV, escape: "\0")
```

## Define Filter and Transform

```elixir
defmodule Filter do
  @filters [
    "Vero Internet", # Vero aparece no cabeçalho do mes na planilha
    "Netflix.Com",
    "Netflix Entretenimento",
    "Pag*Laticiniospilates",
    "Mercadolivre*Nacional",
    "Prudent*Apol000288379",
    "Mp *Melimais",
    "Clinica*Estudio Sante",
    "Digitalocean.Com",
    "Mp *Kotas",
    "Pag. Igti",
    "Uber *Uber *Trip",
    "Pagamento recebido",
    "Liberty_brazil Parc",
    "Link - Cldb Servicos" # ar-condicionado
  ]

  def has_filtered_title?([]), do: false
  def has_filtered_title?([""]), do: false

  def has_filtered_title?([_date, title, _amount]) do
    Enum.any?(@filters, fn item -> title =~ item end)
  end
end
```

```elixir
defmodule Transform do
  @moduledoc """
   Transform the nubank csv file to Google Sheet.
  """

  def to_sheet_format([date, title, amount]) do
    { category, description } = categorise(title)
    [
      "",
      category,
      description,
      "Lucas",
      format_date(date),
      title,
      format_amount(amount)
    ]
  end

  defp format_amount(amount), do: String.replace(amount, ".", ",")

  defp format_date(date) do
    date
    |> Date.from_iso8601!()
    |> Calendar.strftime("%d/%m/%Y")
  end

  # Alimentação - Açouge
  defp categorise("Casa de Carnes Kibife"), do: { "Alimentação", "Açouge" }
  defp categorise("Frigorifico Jesus e Ab"), do: { "Alimentação", "Açouge" }
  defp categorise("Pag*Acouguevidanova"), do: { "Alimentação", "Açouge" }
  defp categorise(<<"Acougue", _::binary>>), do: { "Alimentação", "Açouge" }
  # Alimentação - Almoço
  defp categorise("Carlos Sodre"), do: { "Alimentação", "Almoço" }
  defp categorise("Cascatinha C Club"), do: { "Alimentação", "Almoço" }
  defp categorise("Fogao da Serra Rest."), do: { "Alimentação", "Almoço" }
  defp categorise("Mandala Lanches"), do: { "Alimentação", "Almoço" }
  defp categorise("Pag*Benditaquitandajf"), do: { "Alimentação", "Almoço" }
  defp categorise("Plaza Buffet"), do: { "Alimentação", "Almoço" }
  defp categorise("Alzirareginada"), do: { "Alimentação", "Almoço" }
  defp categorise("Jf Saint Tropez Pizzar"), do: { "Alimentação", "Almoço" }
  # Alimentação - Extras
  defp categorise("Amor & Pao"), do: { "Alimentação", "Extras" }
  defp categorise("Belapadoca"), do: { "Alimentação", "Extras" }
  defp categorise("Grao Moente"), do: { "Alimentação", "Extras" }
  defp categorise("Bom Pastor"), do: { "Alimentação", "Extras" }
  defp categorise("Labareda Bar e Restau"), do: { "Alimentação", "Extras" }
  defp categorise("Vga Distribuidora"), do: { "Alimentação", "Extras" }
  defp categorise("Padaria Bairu Zona Sul"), do: { "Alimentação", "Extras" }
  defp categorise("Padaria Conquista"), do: { "Alimentação", "Extras" }
  defp categorise("Padaria Estrela Branca"), do: { "Alimentação", "Extras" }
  defp categorise("Padariaboavista"), do: { "Alimentação", "Extras" }
  defp categorise("Pag*Padariaanna"), do: { "Alimentação", "Extras" }
  defp categorise("Pag*Vgadistribuidora"), do: { "Alimentação", "Extras" }
  defp categorise("Serrano Pre Assadas"), do: { "Alimentação", "Extras" }
  defp categorise("Summer Acai"), do: { "Alimentação", "Extras" }
  defp categorise("Lanchonete Rodrigo"), do: { "Alimentação", "Extras" }
  defp categorise(<<"Rellicario", _::binary>>), do: { "Alimentação", "Extras" }
  # Alimentação - Feira
  defp categorise("Barraca do Alex"), do: { "Alimentação", "Feira" }
  defp categorise("Casadafruta"), do: { "Alimentação", "Feira" }
  defp categorise("Daniel Aparecido Aran"), do: { "Alimentação", "Feira" }
  defp categorise("Daiane Naira da Silva"), do: { "Alimentação", "Feira" }
  defp categorise("Geziovitaldesouza"), do: { "Alimentação", "Feira" }
  defp categorise("Emporio das Frutas"), do: { "Alimentação", "Feira" }
  defp categorise("Fabricio Alves da Silv"), do: { "Alimentação", "Feira" }
  defp categorise("Feiralivre"), do: { "Alimentação", "Feira" }
  defp categorise("Feirinha"), do: { "Alimentação", "Feira" }
  defp categorise("Jras"), do: { "Alimentação", "Feira" }
  defp categorise("Loirinhomudas"), do: { "Alimentação", "Feira" }
  defp categorise("Admilsonpaiva"), do: { "Alimentação", "Feira" }
  defp categorise("Viniciuslazarodas"), do: { "Alimentação", "Feira" }
  defp categorise("Mercado Mix Leve Mais"), do: { "Alimentação", "Feira" }
  defp categorise("Pag*Alexandre"), do: { "Alimentação", "Feira" }
  defp categorise("Pag*Barracadoalex"), do: { "Alimentação", "Feira" }
  defp categorise("Pag*Barracadupaiva"), do: { "Alimentação", "Feira" }
  defp categorise("Pag*Danniellegarciale"), do: { "Alimentação", "Feira" }
  defp categorise("Pag*Edisonramosda"), do: { "Alimentação", "Feira" }
  defp categorise("Pag*Gabrieltoledoda"), do: { "Alimentação", "Feira" }
  defp categorise("Pag*Geziovitaldesouza"), do: { "Alimentação", "Feira" }
  defp categorise("Pag*Henioinaciodasilv"), do: { "Alimentação", "Feira" }
  defp categorise("Pag*Joseronaldosantos"), do: { "Alimentação", "Feira" }
  defp categorise("Pag*Jras"), do: { "Alimentação", "Feira" }
  defp categorise("Pag*Julianadias"), do: { "Alimentação", "Feira" }
  defp categorise("Pag*Juquita"), do: { "Alimentação", "Feira" }
  defp categorise("Pag*Laticiniospilates"), do: { "Alimentação", "Feira" }
  defp categorise("Pag*Matheusfernandes"), do: { "Alimentação", "Feira" }
  defp categorise("Pag*Viniciuslazarodas"), do: { "Alimentação", "Feira" }
  defp categorise("Pag*Welersonpedrosaco"), do: { "Alimentação", "Feira" }
  defp categorise("Passomar Alimentos"), do: { "Alimentação", "Feira" }
  defp categorise("Pg *Ton Barraca do A"), do: { "Alimentação", "Feira" }
  defp categorise("Pg *Ton Boteco do Ze"), do: { "Alimentação", "Feira" }
  defp categorise("Pg *Ton Explosao de"), do: { "Alimentação", "Feira" }
  defp categorise("Pg *Ton Imperio da F"), do: { "Alimentação", "Feira" }
  defp categorise("Pg *Ton Marcio Gouve"), do: { "Alimentação", "Feira" }
  defp categorise("Pg *Ton Marlon Feira"), do: { "Alimentação", "Feira" }
  defp categorise("Pg *Ton Picados Art"), do: { "Alimentação", "Feira" }
  defp categorise("Picados"), do: { "Alimentação", "Feira" }
  defp categorise("Joseronaldosantos"), do: { "Alimentação", "Feira" }
  defp categorise("Sacolao da Economia"), do: { "Alimentação", "Feira" }
  defp categorise("Sacolao da Luzia"), do: { "Alimentação", "Feira" }
  defp categorise("Tuca"), do: { "Alimentação", "Feira" }
  defp categorise("Wilson Correa"), do: { "Alimentação", "Feira" }
  # Alimentação - Mercado / Geral
  defp categorise("Carrefour Jfo"), do: { "Alimentação", "Mercado / Geral" }
  defp categorise("Carrefour Juiz de For"), do: { "Alimentação", "Mercado / Geral" }
  defp categorise("Lojas Americanas"), do: { "Alimentação", "Mercado / Geral" }
  defp categorise("Mix Ferreira Guimaraes"), do: { "Alimentação", "Mercado / Geral" }
  defp categorise(<<"Bahamas", _::binary>>), do: { "Alimentação", "Mercado / Geral" }
  defp categorise(<<"Supermercados Bh", _::binary>>), do: { "Alimentação", "Mercado / Geral" }
  # Alimentação - Ifood
  defp categorise("iFood - NuPay"), do: { "Alimentação", "Ifood" }
  defp categorise("iFood"), do: { "Alimentação", "Ifood" }
  defp categorise(<<"Ifd*", _::binary>>), do: { "Alimentação", "Ifood" }
  defp categorise(<<"Ifood", _::binary>>), do: { "Alimentação", "Ifood" }
  # Casa
  defp categorise(<<"Drogaria", _::binary>>), do: { "Casa", "Farmácia"}
  defp categorise("Drogalessa"), do: { "Casa", "Farmácia"}
  defp categorise("Paygo*Santa Luzia Gas"), do: { "Casa", "Gás"}
  defp categorise("2472drogasil"), do: { "Casa", "Farmácia" }
  defp categorise(<<"Drogasil", _::binary>>), do: { "Casa", "Farmácia" }
  defp categorise("Twynmaterial"), do: { "Casa", "Extras" }
  defp categorise("Twin"), do: { "Casa", "Extras" }
  defp categorise("Mundo Magico Jf"), do: { "Casa", "Extras" }
  defp categorise("Papelaria Paraiso"), do: { "Casa", "Extras" }
  defp categorise("Frogpay*Ren Weng"), do: { "Casa", "Extras" }
  
  # Carro
  defp categorise("Liberty Parc"), do: { "Carro", "Seguro" }
  defp categorise("Yelumseg Parc1"), do: { "Carro", "Seguro" }
  defp categorise("Mecanica Peracci"), do: { "Carro", "Concertos" }
  defp categorise(<<"Auto Posto", _::binary>>), do: { "Carro", "Combustível" }
  defp categorise(<<"Posto", _::binary>>), do: { "Carro", "Combustível" }
  defp categorise("Carrefour Pst 256 Pcj"), do: { "Carro", "Combustível" }
  defp categorise("Solucoe*Posto de Combu"), do: { "Carro", "Combustível" }
  defp categorise(<<"Zul 10 Cartoes", _::binary>>), do: { "Carro", "Estacionamento" }
  defp categorise("Emp B Estacionamento J"), do: { "Carro", "Estacionamento" }
  defp categorise("Nux*Servi?O de Estacio"), do: { "Carro", "Estacionamento" }
  defp categorise("Estacionamento Braz"), do: { "Carro", "Estacionamento" }
  defp categorise("Transação de NuTag"), do: { "Carro", "Estacionamento" }
  defp categorise("Rei Park"), do: { "Carro", "Estacionamento" }
  defp categorise("My Park"), do: { "Carro", "Estacionamento" }
  # lazer
  defp categorise("Varandao Bh Rio Restau"), do: { "Lazer", "Viagem"}
  defp categorise("Ciceroalves"), do: { "Lazer", "Viagem"}
  defp categorise("Nosso Pao de Queijo"), do: { "Lazer", "Viagem"}
  defp categorise("Nosso Pao de Queijo Ii"), do: { "Lazer", "Viagem"}
  defp categorise("Mariaaparecidahor"), do: { "Lazer", "Viagem"}
  defp categorise("Serjainemendes"), do: { "Lazer", "Viagem"}
  defp categorise("Tarcisio Siqueira"), do: { "Lazer", "Viagem"}
  defp categorise("Paulocustodio"), do: { "Lazer", "Viagem"}
  defp categorise("Oba Oba"), do: { "Lazer", "Viagem"}
  defp categorise("Cantinho da Roca"), do: { "Lazer", "Viagem"}
  defp categorise("Hotel Gauchao"), do: { "Lazer", "Viagem"}
  # Cachorro
  defp categorise("Centro Medico Veterina"), do: { "Cachorro", "Saúde"}
  defp categorise("Animaniacs Petshop"), do: { "Cachorro", "Petshop"}
  defp categorise("Mais Bichos"), do: { "Cachorro", "Petshop"}
  defp categorise("Pag*Petz"), do: { "Cachorro", "Ração"}
  # Luna
  defp categorise("Anjoanasmoda"), do: { "Luna", "Enxoval" }
  defp categorise("Laboratorio Cortes Vi"), do: { "Luna", "Saúde" }

  # Default
  defp categorise(_), do: { "", "" }
end
```

## Parse data

```elixir
input =
  Kino.FS.file_path("Nubank_2024-11-27.csv")
  |> File.stream!()
```

```elixir
# parse input file
parsed_data =
  input
  |> NubankCSV.parse_stream()
  |> Stream.reject(&Filter.has_filtered_title?(&1))
  |> Stream.map(&Transform.to_sheet_format(&1))
```

## Tabulate and show data

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
defmodule FormatData do

  @columns ["Competência", "Categoria", "Descrição", "Pessoa", "Data", "Título", "Valor"]

  def tabulate(parsed_data) do
    for line <- parsed_data, do: Enum.zip(@columns, line)
  end

  def show_blank_categories(list) do
    list
    |> Enum.filter(fn (items) -> find_blank(items) end)
  end

  defp find_blank(items) do
    Enum.any?(items, fn (item) -> find_blank_internal(item) end)
  end

  defp find_blank_internal({"Categoria", ""} = _item), do: true
  defp find_blank_internal({"Descrição", ""} = _item), do: true
  defp find_blank_internal(_item), do: false
end

# FormatData.tabulate(parsed_data)
# |> Enum.take(2) 
# |> FilterBlank.filter()
# |> Enum.map(fn (list) -> get_in(list, [Access.at(0)]) end)
# |> get_in([Access.filter("" == "")])
# |> Enum.count()

```

## Results

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
FormatData.tabulate(parsed_data)
|> FormatData.show_blank_categories()
|> Kino.DataTable.new(
    sorting_enabled: false,
    name: "Registros - Gastos domésticos"
  )

```

<!-- livebook:{"offset":13584,"stamp":{"token":"XCP.j6d0oVQYTe_i22pc27_1_Mf2_TvYcQ6YbtDsT2zg6_kWKUY6OmeHetPhSfBxQVq56tI_GGgcrJJueexyVQPtj93MfW9PopV5VeKyhcV56inVI90LEP9mqhpRYCJKRwIsW9e69D3na3f3tOi-CQCQEfg2BYVFKZVbEmPKcb30rw","version":2}} -->
