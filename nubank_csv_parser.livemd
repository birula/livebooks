<!-- livebook:{"file_entries":[{"file":{"file_system_id":"local","file_system_type":"local","path":"/home/lucas/livebook/nubank-2024-03.csv"},"name":"nubank-2024-03.csv","type":"file"},{"file":{"file_system_id":"local","file_system_type":"local","path":"/home/lucas/Downloads/nubank-2024-04.csv"},"name":"nubank-2024-04.csv","type":"file"},{"file":{"file_system_id":"local","file_system_type":"local","path":"c:/Users/ThinkPad/Downloads/nubank-2024-08.csv"},"name":"nubank-2024-08.csv","type":"file"}]} -->

# Nubank csv parser

```elixir
Mix.install([
  {:nimble_csv, "~> 1.2"},
  {:kino, "~> 0.14.0"}
])
```

## Introdução

This livebook was created to suport a monthly routine of extracting data from Nubank csv. The objective is create a list of expends for our household.

Google Sheet format example:

| Competência | Categoria     | Descrição | Pessoa | Data       | Titulo         | Valor  |
| ------------ | ------------- | ----------- | ------ | ---------- | -------------- | ------ |
| 01/09/2023   | Alimentação | Feira       | Lucas  | 05/09/2023 | Folhas         | 14,00  |
| 01/09/2023   | Cachorro      | Extras      | Dayana | 03/09/2023 | Vitória Hotel | 110,00 |

## Define NimbleCSV Parser

```elixir
NimbleCSV.define(NubankCSV, escape: "\0")
```

## Define Filter and Transform

```elixir
defmodule Filter do
  @filters [
    "Netflix.Com",
    "Netflix Entretenimento",
    "Pag*Laticiniospilates",
    "Mercadolivre*Nacional",
    "Prudent*Apol000288379",
    "Mp *Melimais",
    "Clinica*Estudio Sante",
    "Digitalocean.Com",
    "Mp *Kotas",
    "Pag. Igti",
    "Uber *Uber *Trip",
    "Pagamento recebido",
    "Liberty_brazil Parc",
    "Link - Cldb Servicos 3/6" # ar-condicionado
  ]

  def has_filtered_title?([]), do: false
  def has_filtered_title?([""]), do: false

  def has_filtered_title?([_, _, title, _]) do
    Enum.any?(@filters, fn item -> title =~ item end)
  end
end
```

```elixir
defmodule Transform do
  @moduledoc """
   Transform the nubank csv file to Google Sheet.
  """

  def to_sheet_format([date, category, title, amount]) do
    [
      "",
      category(category, title),
      description(category, title),
      "Lucas",
      format_date(date),
      title,
      format_amount(amount)
    ]
  end

  defp format_amount(amount), do: String.replace(amount, ".", ",")

  defp format_date(date) do
    date
    |> Date.from_iso8601!()
    |> Calendar.strftime("%d/%m/%Y")
  end

  defp category(_, <<"Bahamas", _::binary>>), do: "Alimentação"
  defp category(_, <<"Supermercados Bh", _::binary>>), do: "Alimentação"
  defp category(_, "Mix Ferreira Guimaraes"), do: "Alimentação"
  defp category(_, "Carrefour Juiz de For"), do: "Alimentação"
  defp category(_, "iFood"), do: "Alimentação"
  defp category("supermercado", _), do: "Alimentação"
  defp category("restaurante", _), do: "Alimentação"
  defp category(_, "Belapadoca"), do: "Alimentação"
  defp category(_, "Casadafruta"), do: "Alimentação"
  defp category(_, "Feirinha"), do: "Alimentação"
  defp category(_, "Pag*Jras"), do: "Alimentação"
  defp category(_, "Pag*Henioinaciodasilv"), do: "Alimentação"
  defp category(_, "Pag*Acouguevidanova"), do: "Alimentação"
  defp category(_, "Pag*Laticiniospilates"), do: "Alimentação"
  defp category(_, "Pag*Welersonpedrosaco"), do: "Alimentação"
  defp category(_, "Pag*Gabrieltoledoda"), do: "Alimentação"
  defp category(_, "Pg *Ton Barraca do A"), do: "Alimentação"
  defp category(_, "Pg *Ton Boteco do Ze"), do: "Alimentação"
  defp category(_, "Pg *Ton Imperio da F"), do: "Alimentação"
  defp category(_, "Loirinhomudas"), do: "Alimentação"
  defp category(_, "Wilson Correa"), do: "Alimentação"
  defp category(_, "Pag*Geziovitaldesouza"), do: "Alimentação"
  defp category(_, "Picados"), do: "Alimentação"
  defp category(_, "Mercado Mix Leve Mais"), do: "Alimentação"
  defp category(_, "Pag*Julianadias"), do: "Alimentação"
  defp category(_, "Pag*Alexandre"), do: "Alimentação"
  defp category("saúde", _), do: "Casa"
  defp category(_, "Paygo*Santa Luzia Gas"), do: "Casa"
  # defp category(_, "_"), do: "Casa"
  defp category(_, <<"Auto Posto", _::binary>>), do: "Carro"
  defp category(_, <<"Posto", _::binary>>), do: "Carro"
  defp category(_, "Carrefour Pst 256 Pcj"), do: "Carro"
  defp category(_, "Solucoe*Posto de Combu"), do: "Carro"
  defp category(_, <<"Zul 10 Cartoes", _::binary>>), do: "Carro"
  defp category(_, "Emp B Estacionamento J"), do: "Carro"
  defp category(_, "Nux*Servi?O de Estacio"), do: "Carro"
  defp category(_, "Mecanica Peracci"), do: "Carro"
  defp category(_, "Estacionamento Braz"), do: "Carro"
  defp category("viagem", _), do: "Lazer"
  defp category(_, "Centro Medico Veterina"), do: "Cachorro"
  defp category(_, "Animaniacs Petshop"), do: "Cachorro"
  defp category(_, "Pag*Petz"), do: "Cachorro"
  defp category(_, _), do: ""

  # "description will pattern match agains ´category´ and ´title´"
  # Alimentação
  defp description(_, <<"Bahamas", _::binary>>), do: "Mercado / Geral"
  defp description(_, <<"Supermercados Bh", _::binary>>), do: "Mercado / Geral"
  defp description(_, "Mix Ferreira Guimaraes"), do: "Mercado / Geral"
  defp description(_, "Carrefour Jfo"), do: "Mercado / Geral"
  defp description(_, "Carrefour Juiz de For"), do: "Mercado / Geral"
  defp description(_, "Lojas Americanas"), do: "Mercado / Geral"
  defp description(_, <<"Acougue", _::binary>>), do: "Açouge"
  defp description(_, "Casa de Carnes Kibife"), do: "Açouge"
  defp description(_, "Pag*Acouguevidanova"), do: "Açouge"
  defp description(_, "Frigorifico Jesus e Ab"), do: "Açouge"
  defp description(_, <<"Ifood", _::binary>>), do: "Ifood"
  defp description(_, <<"Ifd*", _::binary>>), do: "Ifood"
  defp description(_, <<"Rellicario", _::binary>>), do: "Extras"
  defp description(_, "iFood"), do: "Ifood"
  defp description(_, "Amor & Pao"), do: "Extras"
  defp description(_, "Padaria Bairu Zona Sul"), do: "Extras"
  defp description(_, "Pag*Padariaanna"), do: "Extras"
  defp description(_, "Pag*Vgadistribuidora"), do: "Extras"
  defp description(_, "Serrano Pre Assadas"), do: "Extras"
  defp description(_, "Summer Acai"), do: "Extras"
  defp description(_, "Mandala Lanches"), do: "Almoço"
  defp description(_, "Pag*Benditaquitandajf"), do: "Almoço"
  defp description(_, "Plaza Buffet"), do: "Almoço"
  defp description(_, "Carlos Sodre"), do: "Almoço"
  defp description(_, "Fogao da Serra Rest."), do: "Almoço"
  defp description(_, "Loirinhomudas"), do: "Feira"
  defp description(_, "Pag*Geziovitaldesouza"), do: "Feira"
  defp description(_, "Tuca"), do: "Feira"
  defp description(_, "Emporio das Frutas"), do: "Feira"
  defp description(_, "Sacolao da Luzia"), do: "Feira"
  defp description(_, "Sacolao da Economia"), do: "Feira"
  defp description(_, "Mercado Mix Leve Mais"), do: "Feira"
  defp description(_, "Pg *Ton Barraca do A"), do: "Feira"
  defp description(_, "Pg *Ton Boteco do Ze"), do: "Feira"
  defp description(_, "Pg *Ton Imperio da F"), do: "Feira"
  defp description(_, "Pg *Ton Explosao de"), do: "Feira"
  defp description(_, "Pg *Ton Marcio Gouve"), do: "Feira"
  defp description(_, "Pag*Jras"), do: "Feira"
  defp description(_, "Pag*Julianadias"), do: "Feira"
  defp description(_, "Pag*Alexandre"), do: "Feira"
  defp description(_, "Pag*Henioinaciodasilv"), do: "Feira"
  defp description(_, "Pag*Laticiniospilates"), do: "Feira"
  defp description(_, "Pag*Gabrieltoledoda"), do: "Feira"
  defp description(_, "Pag*Welersonpedrosaco"), do: "Feira"
  defp description(_, "Pag*Barracadupaiva"), do: "Feira"
  defp description(_, "Pag*Joseronaldosantos"), do: "Feira"
  defp description(_, "Pag*Viniciuslazarodas"), do: "Feira"
  defp description(_, "Pag*Matheusfernandes"), do: "Feira"
  defp description(_, "Pag*Barracadoalex"), do: "Feira"
  defp description(_, "Pag*Edisonramosda"), do: "Feira"
  defp description(_, "Pag*Danniellegarciale"), do: "Feira"
  defp description(_, "Casadafruta"), do: "Feira"
  defp description(_, "Barraca do Alex"), do: "Feira"
  defp description(_, "Feirinha"), do: "Feira"
  defp description(_, "Picados"), do: "Feira"
  defp description(_, "Wilson Correa"), do: "Feira"
  defp description(_, "Fabricio Alves da Silv"), do: "Feira"

  # Casa
  defp description(_, <<"Drogaria", _::binary>>), do: "Farmácia"
  defp description(_, "2472drogasil"), do: "Farmácia"
  defp description(_, "Paygo*Santa Luzia Gas"), do: "Gás"
  # Lazer
  defp description("viagem", _), do: "Viagem"
  # Carro
  defp description("transporte", <<"Auto Posto", _::binary>>), do: "Combustível"
  defp description("transporte", <<"Posto", _::binary>>), do: "Combustível"
  defp description("transporte", "Carrefour Pst 256 Pcj"), do: "Combustível"
  defp description("transporte", "Solucoe*Posto de Combu"), do: "Combustível"
  defp description("transporte", <<"Zul 10 Cartoes", _::binary>>), do: "Estacionamento"
  defp description("transporte", "Emp B Estacionamento J"), do: "Estacionamento"
  defp description("transporte", "Nux*Servi?O de Estacio"), do: "Estacionamento"
  defp description("transporte", "Estacionamento Braz"), do: "Estacionamento"
  defp description("transporte", "Mecanica Peracci"), do: "Concertos"
  # Cachorro
  defp description(_, "Centro Medico Veterina"), do: "Saúde"
  defp description(_, "Animaniacs Petshop"), do: "Petshop"
  defp description(_, "Pag*Petz"), do: "Ração"

  defp description(other, description) do
    ""
  end
end
```

## Parse data

```elixir
input =
  Kino.FS.file_path("nubank-2024-08.csv")
  |> File.stream!()
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
# parse input file
parsed_data =
  input
  |> NubankCSV.parse_stream()
  |> Stream.reject(&Filter.has_filtered_title?(&1))
  |> Stream.map(&Transform.to_sheet_format(&1))
```

## Tabulate and show data

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
defmodule FormatData do

  @columns ["Competência", "Categoria", "Descrição", "Pessoa", "Data", "Título", "Valor"]

  def tabulate(parsed_data) do
    for line <- parsed_data, do: Enum.zip(@columns, line)
  end

  def show_blank_categories(list) do
    list
    |> Enum.filter(fn (items) -> find_blank(items) end)
  end

  defp find_blank(items) do
    Enum.any?(items, fn (item) -> find_blank_internal(item) end)
  end

  defp find_blank_internal({"Competencia", ""} = _item), do: true
  defp find_blank_internal({"Descrição", ""} = _item), do: true
  defp find_blank_internal(_item), do: false
end

# FormatData.tabulate(parsed_data)
# |> Enum.take(2) 
# |> FilterBlank.filter()
# |> Enum.map(fn (list) -> get_in(list, [Access.at(0)]) end)
# |> get_in([Access.filter("" == "")])
# |> Enum.count()

```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
FormatData.tabulate(parsed_data)
|> FormatData.show_blank_categories()
|> Kino.DataTable.new(
    sorting_enabled: false,
    name: "Registros - Gastos domésticos"
  )

```

<!-- livebook:{"offset":10996,"stamp":{"token":"XCP.qd1yX7jRrUU8STk873Ypj8dLr1GO6erHqEOsm-xAT78tsG72SXYQwbVuLaSLg4acFYY95QP0F8aIWvibmt_US4In7jDHH8sPWYGaJ8VsjUi7iD7vBrg7PIHnNfyflPWDP9_meZiNiAYhqvIFD3K37fXLJK5ULGkPO2nJcLRw6g","version":2}} -->
